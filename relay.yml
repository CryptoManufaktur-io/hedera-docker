x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  relay:
    image: ghcr.io/hiero-ledger/hiero-json-rpc-relay:${RELAY_VERSION}
    restart: "unless-stopped"
    pull_policy: always
    tty: true
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "const http=require('http');const p=process.env.HEALTHCHECK_PORT||8080;http.get({host:'localhost',port:p,path:'/health/liveness',timeout:4000},r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1));"
        ]
      interval: 30s
      timeout: 10s
      start_period: 15s
      retries: 3
    environment:
      REDIS_ENABLED: true
      REDIS_URL: "redis://relay-redis:6379"

      CHAIN_ID: "${CHAIN_ID}"
      MIRROR_NODE_URL: "http://api-proxy:8080"
      HEDERA_NETWORK: "${NETWORK}"
      OPERATOR_ID_MAIN: "${OPERATOR_ID_MAIN}"
      OPERATOR_KEY_MAIN: "${OPERATOR_KEY_MAIN}"
      OPERATOR_KEY_FORMAT: "${OPERATOR_KEY_FORMAT}"

      BATCH_REQUESTS_ENABLED: true
      BATCH_REQUESTS_MAX_SIZE: 99999
      CONNECTION_LIMIT: 100
      RATE_LIMIT_DISABLED: true
      DEFAULT_RATE_LIMIT: 9999
      MIRROR_NODE_RETRIES: 10
      MIRROR_NODE_GET_CONTRACT_RESULTS_RETRIES: 50
      MIRROR_NODE_RETRY_DELAY: 2500
      DEBUG_API_ENABLED: true
      FILTER_API_ENABLED: true
      ETH_GET_LOGS_BLOCK_RANGE_LIMIT: 100000
      ETH_GET_TRANSACTION_COUNT_MAX_BLOCK_RANGE: 100000
    <<: *logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.${RPC_HOST:-hedera}.service=${RPC_HOST:-hedera}
      - traefik.http.routers.${RPC_HOST:-hedera}.entrypoints=websecure
      - traefik.http.routers.${RPC_HOST:-hedera}.rule=Host(`${RPC_HOST:-hedera}.${DOMAIN}`)
      - traefik.http.routers.${RPC_HOST:-hedera}.tls.certresolver=letsencrypt
      - traefik.http.routers.${RPC_HOST:-hedera}lb.service=${RPC_HOST:-hedera}
      - traefik.http.routers.${RPC_HOST:-hedera}lb.entrypoints=websecure
      - traefik.http.routers.${RPC_HOST:-hedera}lb.rule=Host(`${RPC_LB:-hedera-lb}.${DOMAIN}`)
      - traefik.http.routers.${RPC_HOST:-hedera}lb.tls.certresolver=letsencrypt
      - traefik.http.services.${RPC_HOST:-hedera}.loadbalancer.server.port=${RELAY_PORT:-7546}

  relay-ws:
    image: ghcr.io/hiero-ledger/hiero-json-rpc-relay:${RELAY_VERSION}
    command: start:ws
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "const http=require('http');const p=process.env.HEALTHCHECK_PORT||8080;http.get({host:'localhost',port:p,path:'/health/liveness',timeout:4000},r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1));"
        ]
      interval: 30s
      timeout: 10s
      start_period: 15s
      retries: 3
    environment:
      HEALTHCHECK_PORT: 8547

      REDIS_ENABLED: true
      REDIS_URL: "redis://relay-redis:6379"

      CHAIN_ID: "${CHAIN_ID}"
      MIRROR_NODE_URL: "http://api-proxy:8080"
      HEDERA_NETWORK: "${NETWORK}"
      OPERATOR_ID_MAIN: "${OPERATOR_ID_MAIN}"
      OPERATOR_KEY_MAIN: "${OPERATOR_KEY_MAIN}"
      OPERATOR_KEY_FORMAT: "${OPERATOR_KEY_FORMAT}"

      SUBSCRIPTIONS_ENABLED: true
      WS_BATCH_REQUESTS_ENABLED: true
      WS_BATCH_REQUESTS_MAX_SIZE: 100
      WS_CONNECTION_LIMIT: 100
      WS_SUBSCRIPTION_LIMIT: 100
      WS_CONNECTION_LIMIT_PER_IP: 100
      WS_MULTIPLE_ADDRESSES_ENABLED: true
      WS_NEW_HEADS_ENABLED: true
      WS_MAX_INACTIVITY_TTL: 0
      MIRROR_NODE_RETRIES: 10
      MIRROR_NODE_GET_CONTRACT_RESULTS_RETRIES: 50
      MIRROR_NODE_RETRY_DELAY: 2500
      WS_PING_INTERVAL: 0
      FILTER_API_ENABLED: true
      ETH_GET_LOGS_BLOCK_RANGE_LIMIT: 10000
      ETH_GET_TRANSACTION_COUNT_MAX_BLOCK_RANGE: 10000
      WS_SAME_SUB_FOR_SAME_EVENT: false
    restart: "unless-stopped"
    pull_policy: always
    tty: true
    <<: *logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.${WS_HOST:-hederaws}.service=${WS_HOST:-hederaws}
      - traefik.http.routers.${WS_HOST:-hederaws}.entrypoints=websecure
      - traefik.http.routers.${WS_HOST:-hederaws}.rule=Host(`${WS_HOST:-hederaws}.${DOMAIN}`)
      - traefik.http.routers.${WS_HOST:-hederaws}.tls.certresolver=letsencrypt
      - traefik.http.routers.${WS_HOST:-hederaws}lb.service=${WS_HOST:-hederaws}
      - traefik.http.routers.${WS_HOST:-hederaws}lb.entrypoints=websecure
      - traefik.http.routers.${WS_HOST:-hederaws}lb.rule=Host(`${WS_LB:-hederaws-lb}.${DOMAIN}`)
      - traefik.http.routers.${WS_HOST:-hederaws}lb.tls.certresolver=letsencrypt
      - traefik.http.services.${WS_HOST:-hederaws}.loadbalancer.server.port=${RELAY_WS_PORT:-8546}

  relay-redis:
    image: redis@sha256:9c6bb76658f8e6f7ca8d0d96c8fcdfb12e9795579c89918aea4fa2ad9817c2f0 # 8.0-M04-bookworm
    volumes:
      - relay-redis-data:/data
    restart: "unless-stopped"
    <<: *logging

volumes:
  relay-redis-data:
